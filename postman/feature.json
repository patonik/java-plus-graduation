{
  "info": {
    "_postman_id": "65ed7212-7e5b-4789-9daf-9a77d033d8f6",
    "name": "Test Extort With Me - Feature_2",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "9727350"
  },
  "item": [
    {
      "name": "Event",
      "item": [
        {
          "name": "Поиск событий",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        await api.addLocus(rnd.getLocus('SETTLEMENT', event.location.lat, event.location.lon));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set('response', event);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('views');\r",
                  "pm.expect(target).to.have.property('confirmedRequests');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('publishedOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
                  "    pm.expect(source.category.id).equal(target.category.id, 'Идентификатор категории должен соответствовать искомой категории');\r",
                  "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость посещения события должна соответствовать искомому событию');\r",
                  "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате искомого события');\r",
                  "    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать искомому событию');\r",
                  "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
                  "    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Число участников события должно соответствовать искомому событию');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/events?loci=1,2,3&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "loci",
                  "value": "1,2,3"
                },
                {
                  "key": "rangeStart",
                  "value": "2022-01-06%2013%3A30%3A38",
                  "description": "дата и время не раньше которых должно произойти событие"
                },
                {
                  "key": "rangeEnd",
                  "value": "2097-09-06%2013%3A30%3A38",
                  "description": "дата и время не позже которых должно произойти событие"
                },
                {
                  "key": "from",
                  "value": "0",
                  "description": "количество событий, которые нужно пропустить для формирования текущего набора"
                },
                {
                  "key": "size",
                  "value": "1000",
                  "description": "количество событий в наборе"
                }
              ]
            },
            "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Создание нового локации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "const jsonData = pm.response.json();",
              "pm.test(\"Локация должна содержать поля: id, lat, lon, rad, name, locusType\", function () {",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('lat');",
              "    pm.expect(jsonData).to.have.property('lon');",
              "    pm.expect(jsonData).to.have.property('rad');",
              "    pm.expect(jsonData).to.have.property('name');",
              "    pm.expect(jsonData).to.have.property('locusType');",
              "});",
              "pm.collectionVariables.set('locusId', jsonData.id);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"lat\": 55.7558,\n    \"lon\": 37.6173,\n    \"rad\": 5.0,\n    \"name\": \"Moscow\",\n    \"locusType\": \"SETTLEMENT\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/loci",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "loci"
          ]
        },
        "description": "Создание новой локации"
      },
      "response": []
    },
    {
      "name": "Получение локации по ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});",
              "const jsonData = pm.response.json();",
              "pm.test(\"Локация должна содержать поля: id, lat, lon, rad, name, locusType\", function () {\n    pm.expect(jsonData).to.have.property('id');\n    pm.expect(jsonData).to.have.property('lat');\n    pm.expect(jsonData).to.have.property('lon');\n    pm.expect(jsonData).to.have.property('rad');\n    pm.expect(jsonData).to.have.property('name');\n    pm.expect(jsonData).to.have.property('locusType');\n});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/admin/loci/{{locusId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "loci",
            "{{locusId}}"
          ]
        },
        "description": "Получение локации по ID"
      },
      "response": []
    },
    {
      "name": "Обновление локации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "const jsonData = pm.response.json();",
              "pm.test(\"Локация должна содержать обновленные поля\", function () {",
              "    pm.expect(jsonData.name).to.equal('Updated Locus');",
              "    pm.expect(jsonData.rad).to.equal(6.0);",
              "    pm.expect(jsonData.locusType).to.equal('BUILDING');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"lat\": 56.752,\n    \"lon\": 38.618,\n    \"rad\": 6.0,\n    \"name\": \"Updated Locus\",\n    \"locusType\": \"BUILDING\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/admin/loci/{{locusId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "loci",
            "{{locusId}}"
          ]
        },
        "description": "Обновление локации"
      },
      "response": []
    },
    {
      "name": "Удаление локации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", function () {\n    pm.response.to.have.status(204);\n});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/loci/{{locusId}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "loci",
            "{{locusId}}"
          ]
        },
        "description": "Удаление локации по ID"
      },
      "response": []
    },
    {
      "name": "Получение списка локаций",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});",
              "pm.test(\"Ответ должен содержать массив локаций\", function () {\n    pm.response.to.be.json;\n    pm.expect(pm.response.json()).to.be.an('array');\n});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/admin/loci",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "loci"
          ]
        },
        "description": "Получение всех локаций"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "API = class {\r",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
          "        this.baseUrl = baseUrl;\r",
          "        this.pm = postman;\r",
          "        this._verbose = verbose;\r",
          "    }\r",
          "\r",
          "    async addUser(user, verbose=null) {\r",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCategory(category, verbose=null) {\r",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addEvent(userId, event, verbose=null) {\r",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addCompilation(compilation, verbose=null) {\r",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
          "    }\r",
          "\r",
          "    async addLocus(locus, verbose=null) {\r",
          "        return this.post(\"/admin/loci\", locus, \"Ошибка при добавлении новой подборки: \", verbose);\r",
          "    }\r",
          "\r",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async publishEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
          "    }\r",
          "    \r",
          "    async rejectEvent(eventId, verbose=null) {\r",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
          "    }\r",
          "\r",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCategory(catId, verbose=null) {\r",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findCompilation(compId, verbose=null) {\r",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findEvent(eventId, verbose=null) {\r",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async findUser(userId, verbose=null) {\r",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
          "    }\r",
          "\r",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
          "    }\r",
          "\r",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
          "    }\r",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
          "        return new Promise((resolve, reject) => {\r",
          "            verbose = verbose == null ? this._verbose : verbose;\r",
          "            const request = {\r",
          "                url: this.baseUrl + path,\r",
          "                method: method,\r",
          "                body: body == null ? \"\" : JSON.stringify(body),\r",
          "                header: { \"Content-Type\": \"application/json\" },\r",
          "            };\r",
          "            if(verbose) {\r",
          "                console.log(\"Отправляю запрос: \", request);\r",
          "            }\r",
          "\r",
          "            try {\r",
          "                this.pm.sendRequest(request, (error, response) => {\r",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
          "                        let err = error ? error : JSON.stringify(response.json());\r",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
          "\r",
          "                        reject(new Error(errorText + err));\r",
          "                    }\r",
          "                    if(verbose) {\r",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
          "                    }\r",
          "                    if (response.stream.length === 0){\r",
          "                        reject(new Error('Отправлено пустое тело ответа'))\r",
          "                    }else{\r",
          "                        resolve(response.json());\r",
          "                    }\r",
          "                });\r",
          "                \r",
          "            } catch(err) {\r",
          "                if(verbose) {\r",
          "                    console.error(errorText, err);\r",
          "                }\r",
          "                return Promise.reject(err);\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "};\r",
          "\r",
          "RandomUtils = class {\r",
          "    constructor() {}\r",
          "\r",
          "    getUser() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getLocus(locusType, latitude, longitude) {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomCity}}'),\r",
          "            locusType: locusType,\r",
          "            lat: latitude,\r",
          "            lon: longitude,\r",
          "            rad: Math.random()*10\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getCategory() {\r",
          "        return {\r",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getEvent(categoryId) {\r",
          "        return {\r",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
          "            category: categoryId,\r",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
          "            eventDate: this.getFutureDateTime(),\r",
          "            location: {\r",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
          "            },\r",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
          "        }\r",
          "    }\r",
          "\r",
          "    getCompilation(...eventIds) {\r",
          "        return {\r",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
          "            events: eventIds\r",
          "        };\r",
          "    }\r",
          "\r",
          "\r",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
          "        let moment = require('moment');\r",
          "\r",
          "        let m = moment();\r",
          "        m.add(hourShift, 'hour');\r",
          "        m.add(minuteShift, 'minute');\r",
          "        m.add(yearShift, 'year');\r",
          "\r",
          "        return m.format('YYYY-MM-DD HH:mm:ss');\r",
          "    }\r",
          "\r",
          "    getWord(length = 1) {\r",
          "        let result = '';\r",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
          "        const charactersLength = characters.length;\r",
          "        let counter = 0;\r",
          "        while (counter < length) {\r",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
          "            counter += 1;\r",
          "        }\r",
          "        return result;\r",
          "    }\r",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    },
    {
      "key": "locusId",
      "value": ""
    }
  ]
}